1. INTRODUCCION

La idea de visual-overview es poder visualizar datos de distintos datasets en csv. La idea es que por cada columna (o conjunto de columnas) se pueda reconocer una visualización y mostrarla como corresponde.

Actualmente se soportan 2 tipos de visualización:
	- default: Por cada columna se muestra un wordcloud y un histograma. Esta visualización se usa cuando no se reconoce ningun otra visualización en especifico.
	- map: Se ocupa cuando se reconocer 2 columnas especificas, una de latitud y otra de longitud.

Aparte de esto, siempre se muestra una previsualización de 5 columnas de la tabla.
__________________________________________________________________________________

2 - EXPLICACION GENERAL VISUALIZACIONES

2.1 - Default

La visualización default corresponde a la primera version de visual-overview. Por lo que no voy a profundizar en esto. Eso sí, destacar que se soluciono un bug que provocaba que la visualización de algunas columnas no se mostrara. Este error era provocado por la siguiente linea en visualizations.js:

	"id = key.toLowerCase().replace(" ","");"

El error era asumir que quitando todos los espacios quedaría una id valida. Esto se cambio por:

	"id = key.toLowerCase().replace(/[^0-9a-z-]/g,"");"

Tambien se solucionó un problema en el que si había un csv mal formado (con el error especifico en que una de las filas de la tabla estaba formado por una columna), en la visualización se mostraba una sola columna. Esto era observable en el dataset incluido "bioequivalencia.csv"

2.2 - Mapas

La visualización por mapas busca la existencia de columnas con latitudo y longitud en ellas. Reconocer el tipo de dato analizando una muestra de datos es poco efectivo, pues la hay muchas formas de escribir el dato de latitud y longitud. 

Dado esto, se decidió tratar de reconocer el tipo de dato solamente con los headers. Para esto se creo un diccionario, que tiene como llaves los posibles nombres para este tipo de columnas y como valores un nombre generico para ese tipo de dato. De esta forma yo consulto el nombre del header al diccionario, y puedo obtener su tipo. Si el nombre del header no se reconoce como ningún tipo, se asigna default.

De esta forma el algoritmo de reconocimiento de tipos quedó así:

	- Tomo un dataset
	- Extraigo el header (como un arreglo)
	- Envió el arreglo a ser analizado (función determineColumnTypes)
	- Recibo de vuelta un arreglo con el tipo de cada header

Una vez que tengo esto listo, lo único que tengo que hacer es buscar que existan lo tipos "latitude" y "longitude" en el arreglo recibido. Esto me puede traer un problema a futuro: Si todas las columnas tienen una visualización independiente unas de otras, me gustaría mostrar las respectivas visualizaciones de cada una. Pero en algunos casos, se genera una visualización que contiene todos los demas datos.

Por ejemplo, en el caso de los mapas, se puede mostrar la información del resto de las columnas dentro del mapa (no solo marcar los puntos). Por esto definí que a veces existe una visualización dominante, que lo que me dice es si existe alguna visualización que pueda contener a las otras. Entonces el algoritmo coninua así.

	- Busco cual es la visualización dominante.
	- Si es default, dibujo cada columna por su cuenta.
	- Si no, dibujo en función de la visualización dominante.

___________________________________________________________________________________

3. RESTRICCIONES ACTUALES

	1. Latitud y longitud tienen que estar en columnas separadas.
	2. El diccionario de tipos se crea (y actualiza) a mano. Esto es inevitable, y la única solución sería encontrar otra forma de clasificar columnas.

_____________________________________________________________________________________

4. DEMO

Todas las rutas puestas aquí se puede copiar y pegar en la pagina de visualización "test.html"

El primer dataset a mostrar, es una tabla simple de latitudes y longitudes creadas de forma aleatoria. Esto solo ilustra el caso en el que las latitudes y longitudes estan bien formados:

Este dataset se encuentra ubicado en:

	"demo/latitude_longitude.csv"

Luego para mostrar el correcto funcionamiento, usare los únicos dataset con latitud y longitud que encontré en la pagina del gobierno de Chile. Estos datasets tiene las columnas de latitud y longitud en formato grados/minutos/segundos, e ilustran la correcta conversión a formato númerico. Estos son:

	"demo/precipitacionesDiariasPorEstaciones2012.csv"
	"demo/temperaturas_diarias_2012.csv"

El siguiente fue sacado de data.gov y sus columnas de latitud/longitud vienen en formato numerico:

	"demo/FieldSampleAirResults_2.csv"

A estas altura (en mi opinion) ya se nota un valor agregado en la visualización, pues se puede ver tendencias de lugares en los datasets. Con solo mirar el mapa se puede decir que un dataset corresponde a datos de chile, y el otro a datos de japon. Este último dataset que dejo, se ve feo, pues la previsualización de la tabla es demasiado grande. El mapa por otro lado se sigue mostrando de forma correcta:

	"demo/incident_gas_transmission_gathering_2002_dec2009.txt"

Notar que este archivo es un txt, pues así venia de la pagina data.gov (que especificaba que era csv). Pero dada la forma en que se parsea, la extensión del archivo en este caso no importa.

Para finalizar, decir la mayoría de los datasets que tenga latitud y longitud (y cumpla con la restricción 1) debería verse correctamente en el mapa. Y como ya se dijo, cualquier otro dataset que no contenga latitud ni longitud debería mostrarse igual que siempre. Se incluyen en la carpeta "normales" datasets con visualización default que fueron exiotsamente probados.


